---
name: Lint Code

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  # JavaScript/TypeScript Linting (Browser Extension)
  eslint:
    name: ESLint (TypeScript/React)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: browser-extension

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: browser-extension/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: Annotate code with ESLint results
        if: failure()
        run: |
          echo "::error::ESLint found issues. Please fix them before merging."

  # Python Linting (Backend)
  python-lint:
    name: Python Linting (Flake8 & Black)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort

      - name: Run Flake8
        run: flake8 . --config=.flake8
        continue-on-error: false

      - name: Check Black formatting
        run: black --check --diff .
        continue-on-error: false

      - name: Check isort import sorting
        run: isort --check-only --diff .
        continue-on-error: false

      - name: Annotate code with Python linting results
        if: failure()
        run: |
          echo "::error::Python linting found issues. Please fix them before merging."

  # Dockerfile Linting
  hadolint:
    name: Dockerfile Linting (Hadolint)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Hadolint on backend Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: backend/Dockerfile
          config: .hadolint.yaml
          failure-threshold: error

      - name: Check for .devcontainer Dockerfile
        id: check-devcontainer
        run: |
          if [ -f ".devcontainer/Dockerfile" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Hadolint on devcontainer Dockerfile
        if: steps.check-devcontainer.outputs.exists == 'true'
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: .devcontainer/Dockerfile
          config: .hadolint.yaml
          failure-threshold: error

  # YAML Linting
  yamllint:
    name: YAML Linting (yamllint)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python (for yamllint)
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install yamllint
        run: pip install yamllint

      - name: Run yamllint
        run: |
          yamllint -c .yamllint.yaml \
            .github/workflows/*.yml \
            docker-compose.yml \
            .hadolint.yaml \
            .yamllint.yaml
        continue-on-error: false

      - name: Annotate code with YAML linting results
        if: failure()
        run: |
          echo "::error::YAML linting found issues. Please fix them before merging."

  # Markdown Linting
  markdownlint:
    name: Markdown Linting (markdownlint)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install markdownlint-cli
        run: npm install -g markdownlint-cli

      - name: Run markdownlint
        run: |
          markdownlint '**/*.md' \
            --ignore node_modules \
            --ignore browser-extension/node_modules \
            --config .markdownlint.json
        continue-on-error: false

      - name: Annotate code with Markdown linting results
        if: failure()
        run: |
          echo "::error::Markdown linting found issues. Please fix them before merging."

  # Summary Job - All linting must pass
  lint-summary:
    name: Linting Summary
    runs-on: ubuntu-latest
    needs: [eslint, python-lint, hadolint, yamllint, markdownlint]
    if: always()

    steps:
      - name: Check all linting jobs
        run: |
          echo "ESLint: ${{ needs.eslint.result }}"
          echo "Python Lint: ${{ needs.python-lint.result }}"
          echo "Hadolint: ${{ needs.hadolint.result }}"
          echo "YAML Lint: ${{ needs.yamllint.result }}"
          echo "Markdown Lint: ${{ needs.markdownlint.result }}"

          if [ "${{ needs.eslint.result }}" != "success" ] || \
             [ "${{ needs.python-lint.result }}" != "success" ] || \
             [ "${{ needs.hadolint.result }}" != "success" ] || \
             [ "${{ needs.yamllint.result }}" != "success" ] || \
             [ "${{ needs.markdownlint.result }}" != "success" ]; then
            echo "::error::One or more linting checks failed!"
            exit 1
          fi

          echo "âœ… All linting checks passed!"
